# Generated by Django 4.2 on 2023-04-22 19:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', main.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaseRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(default='', max_length=256)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates_sent', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32)),
                ('activity', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=1024)),
                ('stack', models.CharField(max_length=15)),
                ('payment', models.PositiveIntegerField()),
                ('state', models.IntegerField(choices=[(1, 'Open'), (2, 'Running'), (3, 'Closed'), (4, 'Canceled')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='PassportInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport_series', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(9999), django.core.validators.MinValueValidator(1000)], verbose_name='passport series')),
                ('passport_number', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(100000)], verbose_name='passport number')),
                ('passport_issue_date', models.DateField(null=True, verbose_name='passport issue date')),
                ('passport_issue_place', models.CharField(max_length=100, null=True, verbose_name='passport issue place')),
            ],
        ),
        migrations.CreateModel(
            name='BaseSpecType',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerRate',
            fields=[
                ('baserate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.baserate')),
                ('generosity', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('certainty', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('positivity', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('politeness', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
            ],
            bases=('main.baserate',),
        ),
        migrations.CreateModel(
            name='ExecutorRate',
            fields=[
                ('baserate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.baserate')),
                ('speed', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('politeness', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('reliability', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('competence', models.PositiveIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
            ],
            bases=('main.baserate',),
        ),
        migrations.AddField(
            model_name='baserate',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.order'),
        ),
        migrations.AddField(
            model_name='baserate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates_received', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=256)),
                ('state', models.IntegerField(choices=[(1, 'Pending'), (2, 'Declined'), (3, 'Accepted')], default=1)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications_sent', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.order')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerType',
            fields=[
                ('basespectype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basespectype')),
            ],
            bases=('main.basespectype',),
        ),
        migrations.CreateModel(
            name='ExecutorType',
            fields=[
                ('passportinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='main.passportinfo')),
                ('basespectype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basespectype')),
                ('activity', models.CharField(blank=True, max_length=100, verbose_name='activity')),
                ('resume', models.TextField(blank=True, max_length=3000, verbose_name='resume')),
            ],
            bases=('main.basespectype', 'main.passportinfo'),
        ),
        migrations.CreateModel(
            name='CorporateCustomerType',
            fields=[
                ('customertype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.customertype')),
                ('company_name', models.CharField(max_length=100, verbose_name='company name')),
                ('creation_date', models.DateField(blank=True, verbose_name='company creation date')),
                ('registration_number', models.CharField(blank=True, max_length=100, verbose_name='registration number')),
            ],
            bases=('main.customertype',),
        ),
        migrations.CreateModel(
            name='PrivateCustomerType',
            fields=[
                ('passportinfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='main.passportinfo')),
                ('customertype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.customertype')),
            ],
            bases=('main.customertype', 'main.passportinfo'),
        ),
        migrations.AddField(
            model_name='order',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.customertype'),
        ),
        migrations.AddField(
            model_name='order',
            name='executor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.executortype'),
        ),
    ]
